name: CI

on:
  push:
    branches: [main]
    tags: ["releases/**"]
  pull_request:
    branches: ["*"]

jobs:
  spellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: echo '::add-matcher::.github/cspell-problem-matcher.json'
      - run: yarn spellcheck --no-progress

  conformance-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn workspace @foxglove/mcap-conformance lint:ci
      - run: yarn workspace @foxglove/mcap-conformance typecheck

  conformance-cpp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-${{ hashFiles('~/.conan/data') }}
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - run: cd cpp && make ci
      - run: yarn install --frozen-lockfile
      - run: yarn test:conformance:generate-inputs --verify
      - run: yarn test:conformance --runner cpp-

  conformance-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18.x
      - run: cd go && make build-conformance-binaries
      - run: yarn install --frozen-lockfile
      - run: yarn test:conformance:generate-inputs --verify
      - run: yarn test:conformance --runner go-

  conformance-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/setup-python@v3
      - run: cd python && pip install .
      - run: yarn install --frozen-lockfile
      - run: yarn test:conformance:generate-inputs --verify
      - run: yarn test:conformance --runner py-

  conformance-typescript:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn test:conformance:generate-inputs --verify
      - run: yarn test:conformance --runner ts-

  conformance-swift:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: fwal/setup-swift@v1 # cspell: disable-line
        with:
          swift-version: 5.5.2
      - run: swift build
      - run: yarn install --frozen-lockfile
      - run: yarn test:conformance:generate-inputs --verify
      - run: yarn test:conformance --runner swift-

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: yarn lint:docs

  cpp:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cpp
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: "true"
      - uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-${{ hashFiles('~/.conan/data') }}
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - run: make ci-format-check
      - run: make ci
      - run: make test-host

  typescript:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn workspace @foxglove/mcap lint:ci
      - run: yarn workspace @foxglove/mcap typecheck
      - run: yarn workspace @foxglove/mcap test

  typescript-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn workspace @foxglove/mcap-example-validate lint:ci
      - run: yarn workspace @foxglove/mcap-example-validate typecheck
      - run: yarn workspace @foxglove/mcap-benchmarks lint:ci
      - run: yarn workspace @foxglove/mcap-benchmarks typecheck

  python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.7
          cache: pipenv
      - run: pip install pipenv
      - run: pipenv install --dev --deploy
      - run: pipenv run black --check --diff --color .
      - run: pipenv run python -m flake8 mcap tests
      - run: pipenv run python -m pytest
      - run: pipenv run pyright mcap tests
      - run: pipenv run python -m build

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TESTPYPI_API_TOKEN }}
          packages_dir: python/dist
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/releases/python/v') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: python/dist

  go:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: go
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18.x
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.44.2
      - run: make lint
      - run: make test

  go-release-cli:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - go
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/releases/mcap-cli/v')
    defaults:
      run:
        working-directory: go/cli/mcap
    strategy:
      matrix:
        goosarch:
          - "darwin/amd64"
          - "darwin/arm64"
          - "linux/amd64"
          - "linux/arm64"
          - "windows/amd64"
          - "windows/arm"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18.x
      - name: Get OS and arch info
        run: |
          GOOSARCH=${{matrix.goosarch}}
          GOOS=${GOOSARCH%/*}
          GOARCH=${GOOSARCH#*/}
          BINARY_NAME=mcap-$GOOS-$GOARCH
          if [[ "$BINARY_NAME" =~ .*windows.* ]]; then
            BINARY_NAME=$BINARY_NAME.exe
          fi
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "GOOS=$GOOS" >> $GITHUB_ENV
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV
      - name: Build binary
        run: make build -e BINARY_NAME=$BINARY_NAME
      - name: Make release notes
        run: |
          git log --oneline --no-merges --first-parent --grep CLI --decorate-refs=refs $(git describe --tags $(git rev-list --tags=releases/mcap-cli --max-count=1))..HEAD > ${{ github.workspace }}-CHANGELOG.txt
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./go/cli/mcap/bin/${{env.BINARY_NAME}}
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          draft: false

  swift:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: fwal/setup-swift@v1 # cspell: disable-line
        with:
          swift-version: 5.5.2
      - run: curl -LO https://github.com/realm/SwiftLint/releases/download/0.46.5/swiftlint_linux.zip && unzip swiftlint_linux.zip swiftlint
      - run: curl -LO https://github.com/nicklockwood/SwiftFormat/releases/download/0.49.5/swiftformat_linux.zip && unzip swiftformat_linux.zip && chmod +x swiftformat_linux
      - run: ./swiftlint
      - run: ./swiftformat_linux --lint .
      - run: swift build
      - run: swift test
