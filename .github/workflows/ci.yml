name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: ["*"]

jobs:
  spellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: echo '::add-matcher::.github/cspell-problem-matcher.json'
      - run: yarn spellcheck

  conformance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/setup-python@v2
      - run: cd python && pip install .
      - run: yarn install --frozen-lockfile
      - run: yarn test:conformance:generate-inputs --verify
      - run: yarn test:conformance

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: yarn lint:docs

  cpp:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cpp
    steps:
      - uses: actions/checkout@v2
      - run: make format-check
      - run: make test

  typescript:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn workspace @foxglove/mcap lint:ci
      - run: yarn workspace @foxglove/mcap typecheck
      - run: yarn workspace @foxglove/mcap test

  python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: pipenv
      - run: pip install pipenv
      - run: pipenv install --dev --deploy
      - run: pipenv run black --check --diff --color .
      - run: pipenv run pyright mcap tests
      - run: pipenv run python -m build

  go:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: go
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.41.1
      - run: make lint
      - run: make test
