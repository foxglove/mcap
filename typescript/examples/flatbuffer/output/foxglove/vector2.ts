// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A vector in 2D space that represents a direction only
 */
export class Vector2 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Vector2 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVector2(bb:flatbuffers.ByteBuffer, obj?:Vector2):Vector2 {
  return (obj || new Vector2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVector2(bb:flatbuffers.ByteBuffer, obj?:Vector2):Vector2 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Vector2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * x coordinate length
 */
x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 1.0;
}

/**
 * y coordinate length
 */
y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 1.0;
}

static startVector2(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat64(0, x, 1.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat64(1, y, 1.0);
}

static endVector2(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishVector2Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedVector2Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createVector2(builder:flatbuffers.Builder, x:number, y:number):flatbuffers.Offset {
  Vector2.startVector2(builder);
  Vector2.addX(builder, x);
  Vector2.addY(builder, y);
  return Vector2.endVector2(builder);
}
}
